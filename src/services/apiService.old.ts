import axios, { AxiosInstance, AxiosResponse } from 'axios';
import bridge from '@vkontakte/vk-bridge';
import { vkApiService } from './vkApiService';
import { FEATURE_FLAGS, TIMEOUTS } from '../config/api';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
export interface ApiResponse<T> {
  data: T;
  message?: string;
  success: boolean;
}

export interface PaginatedResponse<T> {
  data: T[];
  total: number;
  page: number;
  limit: number;
  hasMore: boolean;
}

export interface AuthResponse {
  user: any; // User interface from types
  access_token: string;
  refresh_token?: string;
  expires_in: number;
}

export interface LoginRequest {
  vk_user_id: number;
  vk_access_token: string;
  user_info: {
    first_name: string;
    last_name: string;
    photo_200?: string;
    city?: { title: string };
  };
}

class ApiService {
  private api: AxiosInstance;
  private accessToken: string | null = null;

  constructor() {
    // –ë–∞–∑–æ–≤—ã–π URL API - –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ backend
    const baseURL = import.meta.env.VITE_API_URL || 'https://your-backend-domain.com/api/v1';

    this.api = axios.create({
      baseURL,
      timeout: TIMEOUTS.DEFAULT,
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
    });

    this.setupInterceptors();
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ interceptors –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
   */
  private setupInterceptors(): void {
    // Interceptor –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    this.api.interceptors.request.use(
      (config) => {
        if (this.accessToken) {
          config.headers.Authorization = `Bearer ${this.accessToken}`;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º VK —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        const vkToken = vkApiService.getAccessToken();
        if (vkToken) {
          config.headers['X-VK-Token'] = vkToken;
        }
        
        if (FEATURE_FLAGS.DEBUG_MODE) {
          console.log('üöÄ API Request:', config.method?.toUpperCase(), config.url, config.data);
        }
        
        return config;
      },
      (error) => {
        return Promise.reject(error);
      }
    );

    // Interceptor –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –æ—à–∏–±–æ–∫
    this.api.interceptors.response.use(
      (response) => {
        if (FEATURE_FLAGS.DEBUG_MODE) {
          console.log('‚úÖ API Response:', response.config.url, response.data);
        }
        return response;
      },
      async (error) => {
        if (FEATURE_FLAGS.DEBUG_MODE) {
          console.error('‚ùå API Error:', error.config?.url, error.response?.data || error.message);
        }

        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ
        if (error.response?.status === 401 && this.accessToken) {
          this.accessToken = null;
          
          // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å VK –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
          try {
            const authResult = await this.initializeVKAuth();
            if (authResult && error.config) {
              // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
              error.config.headers.Authorization = `Bearer ${authResult.access_token}`;
              return this.api.request(error.config);
            }
          } catch (refreshError) {
            console.error('Failed to refresh token:', refreshError);
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω –≤—Ö–æ–¥–∞
            this.handleAuthFailure();
          }
        }
        
        return Promise.reject(error);
      }
    );
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  private handleAuthFailure(): void {
    // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã
    this.accessToken = null;
    
    // –û—á–∏—â–∞–µ–º localStorage
    localStorage.removeItem('gym_helper_access_token');
    localStorage.removeItem('gym_helper_user_data');
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    console.warn('Authentication failed - user needs to login again');
  }

  // === UTILITY METHODS ===

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞
   */
  setAccessToken(token: string): void {
    this.accessToken = token;
    localStorage.setItem('gym_helper_access_token', token);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞
   */
  getAccessToken(): string | null {
    return this.accessToken || localStorage.getItem('gym_helper_access_token');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã–π API
   */
  isUsingBackendAPI(): boolean {
    return FEATURE_FLAGS.USE_BACKEND_API;
  }

  // === AUTHENTICATION ===

  /**
   * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ VK
   */
  async login(loginData: LoginRequest): Promise<AuthResponse> {
    if (!FEATURE_FLAGS.USE_BACKEND_API) {
      // –ú–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      const mockResponse: AuthResponse = {
        user: {
          id: loginData.vk_user_id,
          vk_id: loginData.vk_user_id,
          first_name: loginData.user_info.first_name,
          last_name: loginData.user_info.last_name,
          photo_200: loginData.user_info.photo_200,
          city: loginData.user_info.city,
          level: 'beginner',
          createdAt: new Date().toISOString(),
          updatedAt: new Date().toISOString(),
        },
        access_token: 'mock_token_' + Date.now(),
        expires_in: 3600
      };

      this.setAccessToken(mockResponse.access_token);
      return mockResponse;
    }

    const response: AxiosResponse<AuthResponse> = await this.api.post('/auth/vk-login', loginData);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    this.setAccessToken(response.data.access_token);
    
    return response.data;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
   */
  async initializeVKAuth(): Promise<AuthResponse | null> {
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º VK API
      await vkApiService.initialize();
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ VK
      const userInfo = await vkApiService.getCurrentUser();
      
      // –ü–æ–ª—É—á–∞–µ–º VK —Ç–æ–∫–µ–Ω
      const vkToken = vkApiService.getAccessToken();
      if (!vkToken) {
        throw new Error('VK token not available');
      }

      const loginData: LoginRequest = {
        vk_user_id: userInfo.id,
        vk_access_token: vkToken,
        user_info: {
          first_name: userInfo.first_name,
          last_name: userInfo.last_name,
          photo_200: userInfo.photo_200,
          city: userInfo.city,
        },
      };

      return await this.login(loginData);
    } catch (error) {
      console.error('VK authentication failed:', error);
      return null;
    }
  }

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞
  setAccessToken(token: string) {
    this.accessToken = token;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞
  getAccessToken(): string | null {
    return this.accessToken;
  }

  // === AUTHENTICATION ===

  async login(loginData: LoginRequest): Promise<AuthResponse> {
    const response: AxiosResponse<AuthResponse> = await this.api.post('/auth/vk-login', loginData);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    this.setAccessToken(response.data.access_token);
    
    return response.data;
  }

  // === USERS ===

  async getCurrentUser(): Promise<ApiResponse<any>> {
    const response = await this.api.get('/users/me');
    return response.data;
  }

  async updateUserProfile(profileData: any): Promise<ApiResponse<any>> {
    const response = await this.api.put('/users/me', profileData);
    return response.data;
  }

  async getFriends(params?: {
    status?: string;
    search?: string;
  }): Promise<ApiResponse<any[]>> {
    const response = await this.api.get('/users/friends', { params });
    return response.data;
  }

  // === EXERCISES ===

  async getExercises(params?: {
    page?: number;
    limit?: number;
    search?: string;
    muscleGroup?: string;
    equipment?: string;
    createdBy?: number;
  }): Promise<PaginatedResponse<any>> {
    const response = await this.api.get('/exercises', { params });
    return response.data;
  }

  async getExerciseById(id: string): Promise<ApiResponse<any>> {
    const response = await this.api.get(`/exercises/${id}`);
    return response.data;
  }

  async createExercise(exerciseData: any): Promise<ApiResponse<any>> {
    const response = await this.api.post('/exercises', exerciseData);
    return response.data;
  }

  async updateExercise(id: string, exerciseData: any): Promise<ApiResponse<any>> {
    const response = await this.api.put(`/exercises/${id}`, exerciseData);
    return response.data;
  }

  async deleteExercise(id: string): Promise<void> {
    await this.api.delete(`/exercises/${id}`);
  }

  async uploadExerciseMedia(id: string, file: File, type: 'image' | 'video'): Promise<ApiResponse<any>> {
    const formData = new FormData();
    formData.append('file', file);
    formData.append('type', type);

    const response = await this.api.post(`/exercises/${id}/media`, formData, {
      headers: {
        'Content-Type': 'multipart/form-data',
      },
    });
    
    return response.data;
  }

  // === WORKOUTS ===

  async getWorkouts(params?: {
    page?: number;
    limit?: number;
    status?: 'upcoming' | 'past' | 'templates';
    search?: string;
    date_from?: string;
    date_to?: string;
    gym?: string;
  }): Promise<PaginatedResponse<any>> {
    const response = await this.api.get('/workouts', { params });
    return response.data;
  }

  async getWorkoutById(id: string): Promise<ApiResponse<any>> {
    const response = await this.api.get(`/workouts/${id}`);
    return response.data;
  }

  async createWorkout(workoutData: any): Promise<ApiResponse<any>> {
    const response = await this.api.post('/workouts', workoutData);
    return response.data;
  }

  async updateWorkout(id: string, workoutData: any): Promise<ApiResponse<any>> {
    const response = await this.api.put(`/workouts/${id}`, workoutData);
    return response.data;
  }

  async deleteWorkout(id: string): Promise<void> {
    await this.api.delete(`/workouts/${id}`);
  }

  async completeWorkout(id: string, completionData: any): Promise<ApiResponse<any>> {
    const response = await this.api.post(`/workouts/${id}/complete`, completionData);
    return response.data;
  }

  async respondToWorkoutInvitation(
    workoutId: string, 
    userId: number, 
    status: 'accepted' | 'declined'
  ): Promise<ApiResponse<any>> {
    const response = await this.api.post(
      `/workouts/${workoutId}/participants/${userId}/respond`,
      { status }
    );
    return response.data;
  }

  // === CALENDAR ===

  async getCalendar(params?: {
    month?: string; // YYYY-MM
    year?: string;  // YYYY
  }): Promise<ApiResponse<any[]>> {
    const response = await this.api.get('/calendar', { params });
    return response.data;
  }

  // === STATISTICS ===

  async getUserStatistics(params?: {
    period?: 'week' | 'month' | 'year';
    year?: string;
    month?: string;
  }): Promise<ApiResponse<any>> {
    const response = await this.api.get('/statistics/me', { params });
    return response.data;
  }

  // === UTILITY METHODS ===

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è VK –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  async initializeVKAuth(): Promise<AuthResponse | null> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ VK
      const userInfo = await bridge.send('VKWebAppGetUserInfo');
      
      // –ü–æ–ª—É—á–∞–µ–º access token (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ VK Bridge)
      const authData = await bridge.send('VKWebAppGetAuthToken', {
        app_id: parseInt(import.meta.env.VITE_VK_APP_ID || '0'),
        scope: 'friends'
      });

      const loginData: LoginRequest = {
        vk_user_id: userInfo.id,
        vk_access_token: authData.access_token,
        user_info: {
          first_name: userInfo.first_name,
          last_name: userInfo.last_name,
          photo_200: userInfo.photo_200,
          city: userInfo.city,
        },
      };

      return await this.login(loginData);
    } catch (error) {
      console.error('VK authentication failed:', error);
      return null;
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ API
  handleApiError(error: any): string {
    if (error.response) {
      // –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏
      const { status, data } = error.response;
      
      switch (status) {
        case 400:
          return data.error || '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞';
        case 401:
          return '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è';
        case 403:
          return '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω';
        case 404:
          return '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω';
        case 422:
          return data.details 
            ? data.details.map((detail: any) => detail.message).join(', ')
            : '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö';
        case 500:
          return '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
        default:
          return data.error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞';
      }
    } else if (error.request) {
      // –ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω
      return '–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º';
    } else {
      // –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–ø—Ä–æ—Å–∞
      return '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞';
    }
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è API
  formatDateForAPI(date: Date): string {
    return date.toISOString().split('T')[0]; // YYYY-MM-DD
  }

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è API
  formatTimeForAPI(date: Date): string {
    return date.toTimeString().split(' ')[0].substring(0, 5); // HH:mm
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const apiService = new ApiService();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
export default ApiService;
